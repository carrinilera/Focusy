<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Focusy ⏳</title>

    <!-- Google Font -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">

    <!-- Bootstrap + Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">

    <style>
      body {
        background: linear-gradient(to right, #0f2027, #203a43, #2c5364);
        font-family: 'Poppins', sans-serif;
        padding-top: 3rem;
        color: #f0f0f0;
      }

      h1 {
        color: #00ffcc;
        text-shadow: 0 0 10px #00ffcc;
      }

      .timer-display {
        font-size: 4rem;
        font-weight: bold;
        text-align: center;
        color: #00ffcc;
        margin-bottom: 1rem;
        text-shadow: 0 0 10px #00ffcc;
        animation: glow 1.5s infinite alternate;
        transition: all 0.3s ease;
      }

      @keyframes glow {
        from { text-shadow: 0 0 5px #00ffcc; }
        to { text-shadow: 0 0 20px #00ffcc; }
      }

      .controls button {
        margin: 0.3rem;
        background-color: #1e1e2f;
        border: none;
        color: white;
        box-shadow: 0 4px 20px rgba(0,255,204,0.2);
        transition: 0.3s;
      }

      .controls button:hover {
        background-color: #00ffcc;
        color: #1e1e2f;
      }

      .settings input {
        max-width: 5rem;
        background-color: #1e1e2f;
        border: 1px solid #00ffcc;
        color: #f0f0f0;
      }

      .settings label {
        color: #f0f0f0;
      }

      .history-item {
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(0,255,204, 0.3);
        border-left: 4px solid #00ffcc;
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 0.5rem;
        backdrop-filter: blur(5px);
      }

      .btn-clear {
        background-color: #ff4d4d;
        border: none;
      }

      .btn-clear:hover {
        background-color: #ff6666;
      }
    </style>
  </head>
  <body class="container">
    <h1 class="text-center mb-4">Focusy ⏳</h1>

    <div class="text-center">
      <div class="timer-display" id="timer">25:00</div>
      <div class="controls">
        <button class="btn" id="startBtn"><i class="bi bi-play-fill"></i> Start</button>
        <button class="btn" id="pauseBtn"><i class="bi bi-pause-fill"></i> Pause</button>
        <button class="btn" id="resetBtn"><i class="bi bi-arrow-repeat"></i> Reset</button>
      </div>
    </div>

    <div class="mt-4 settings">
      <h5>Duration Settings (minutes)</h5>
      <div class="row g-2 align-items-center">
        <div class="col-auto">
          <label for="focusDuration" class="col-form-label">Focus:</label>
        </div>
        <div class="col-auto">
          <input type="number" id="focusDuration" class="form-control" value="25" min="1">
        </div>
      </div>
    </div>

    <div class="mt-4">
      <h5>Focus History</h5>
      <div id="history"></div>
      <button onclick="clearHistory()" class="btn btn-clear mt-2">
        <i class="bi bi-trash"></i> Clear All History
      </button>
    </div>

    <script type="module">
      import { backend } from "declarations/backend";

      let timerInterval;
      let remainingSeconds = 1500;
      let isRunning = false;

      const timerDisplay = document.getElementById("timer");
      const focusInput = document.getElementById("focusDuration");
      const historyDiv = document.getElementById("history");

      function formatTime(seconds) {
        const m = Math.floor(seconds / 60).toString().padStart(2, '0');
        const s = (seconds % 60).toString().padStart(2, '0');
        return `${m}:${s}`;
      }

      function updateDisplay() {
        timerDisplay.textContent = formatTime(remainingSeconds);
      }

      function startTimer() {
        if (isRunning) return;
        isRunning = true;
        timerInterval = setInterval(() => {
          remainingSeconds--;
          updateDisplay();
          if (remainingSeconds <= 0) {
            clearInterval(timerInterval);
            isRunning = false;
            saveSession(parseInt(focusInput.value));
            remainingSeconds = focusInput.value * 60;
            updateDisplay();
          }
        }, 1000);
      }

      function pauseTimer() {
        clearInterval(timerInterval);
        isRunning = false;
      }

      function resetTimer() {
        clearInterval(timerInterval);
        isRunning = false;
        remainingSeconds = focusInput.value * 60;
        updateDisplay();
      }

      const saveSession = async (duration) => {
        try {
          await backend.addSession(duration);
          loadHistory();
        } catch (err) {
          console.error("Failed to save session:", err);
        }
      };

      const loadHistory = async () => {
        try {
          const sessions = await backend.getSessions();
          renderHistory(sessions.reverse());
        } catch (err) {
          console.error("Failed to load history:", err);
        }
      };

      const clearHistory = async () => {
        try {
          await backend.clearSessions();
          loadHistory();
        } catch (err) {
          console.error("Failed to clear history:", err);
        }
      };

      function renderHistory(sessions) {
        historyDiv.innerHTML = "";
        sessions.forEach(s => {
          const div = document.createElement("div");
          div.className = "history-item";
          const endDate = new Date(Number(s.endTime / 1_000_000));
          div.textContent = `✅ Focused for ${s.durationMinutes} minutes at ${endDate.toLocaleString()}`;
          historyDiv.appendChild(div);
        });
      }

      document.getElementById("startBtn").onclick = startTimer;
      document.getElementById("pauseBtn").onclick = pauseTimer;
      document.getElementById("resetBtn").onclick = resetTimer;
      focusInput.addEventListener("change", () => {
        if (!isRunning) {
          remainingSeconds = focusInput.value * 60;
          updateDisplay();
        }
      });

      updateDisplay();
      loadHistory();
    </script>
  </body>
</html>
